INTRODUCTION

Thanks for taking the time to work on our coding exercise.  We really
appreciate it!

This coding test is meant to give you an opportunity to demonstrate
your skills as a professional software engineer.  We've tried to
eliminate any gotchas, tricks or overly obscure knowledge.

Feel free to consult any and all resources you need to work through
this problem.  However, please don't consult others directly.  It
would also be a real drag if we realized you just Googled for this
problem on the Internet.

This exercise is meant to take about two hours of your time, give or
take.

Languages like Ruby, Python and PERL are good choices for solving this
problem, but it can be solved in most any language.  Use whatever is
most comfortable to you.


HOW WE'RE GOING TO EVALUATE YOUR WORK

Some of the criteria we consider when reviewing your submission
include:

* Is the code functionally correct?
* Is the code tidy, understandable and maintainable?
* Is it reasonably fast?
* Is it reasonably scalable?
* Is the design too simple?  Is the design too complex?

You should write this code as if it will be seen by your colleagues
and then go into production.

We will run the program on files of diffrent sizes and composition.a


WHEN YOU'RE DONE

After about two hours, please return the following to the person who
sent you the test:

* Your source code.
* A file containing the output of your program
* Any special instructions for running your program


AND NOW BEGIN!

Read the exercise problem, take a few minutes to think about the
problem, take a couple deep breaths, and then get started.  

We're excited to see your code!

Good luck!


----------------------------------------------------------------------

THE EXERCISE

You will write a program which takes a text file as input, extracts
data, computes some stuff, and then outputs that stuff.


THE INPUT

The input file contains people's names as well as some other data.
Here's an example of the input:

  Schuppe, Suzanne -- velit
      Expedita nihil ad aut similique facilis numquam blanditiis.
  Cronin, Bella -- tempore
      Omnis quos veritatis ea sequi est nostrum.
      Ex eum architecto ab vel non pariatur.
  Runolfsson, Dayna -- molestias
      Maiores facilis ut consequatur.
  Robel, Deshawn -- quisquam
      Rerum sit aut et.

The names are in Lastname, Firstname format.  You can make a
simplifying assumption that all names contain only letters.  (Names
which don't conform to this assumption can be ignored.)

After each line with a name, there will be one or more lines with
random prose.

Along with this problem statement you will have also received a sample
data file which you can use during the exercise.  (We will run your
program against a number of data files.)


THE OUTPUT

Output should be written to standard out.  The answers to these four
questions should be output.


*** Question #1 ***

Print out the number of unique full names, first names and last names,
like so:

  There are 482 unique full names.
  There are 188 unique first names.
  There are 46 unique last names.


*** Question #2 ***

Print to standard out the 10 most common first names along with the
number of times the name appeared in the file in descending order.
Don't worry about tie scores.

  The ten most common first names are:
    Robert (12)
    Alessandro (11)
    Burnice (11)
    Ara (10)
    Evalyn (10)
    Bailee (10)
    Sonia (10)
    Zoie (9)
    Claudie (9)
    Nasir (9)


*** Question #3 ***

Print to standard out the 10 most common last names along with the
number of times the name appeared in the file in descending order.
Don't worry about tie scores.

  The ten most common last names are:
    Kuhic (7)
    Rosenbaum (7)
    Marks (6)
    Denesik (5)
    Ernser (5)
    Balistreri (4)
    Beer (4)
    Harber (4)
    Kuvalis (4)
    Reynolds (4)


*** Question #4 ***

This one is a little more complicated.  The first step is to identify
the first 25 completely unique names in the list.  For example:

  Smith, Fred        // Unique!  We haven't seen "Fred" or "Smith" yet
  Patel, Fred        // Not unique.  We've seen "Fred"
  Patel, Betty       // Not unique.  We've seen "Patel"
  Chang, Sarah       // Unique!  We haven't seen "Sarah" or "Chang" yet

Next, we want to compute 25 new names using the first names and last
names from the names we gathered in the the prior step.  These names
must be new an unique and not appear in the original set of 25 names.

The output should look like:

  The 25 formulated names are:
    Auer, Korey
    Harvey, Elta
    Grady, Marcella
    // And so on ...


That's it.  You're done!
